// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BuyRealEstate.Domain.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BuyRealEstate.Domain.Models.DevelopmentStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InsertUser")
                        .HasColumnType("int");

                    b.Property<int>("ProjectID")
                        .HasColumnType("int");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdateUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectID");

                    b.ToTable("DevelopmentStatuses", (string)null);
                });

            modelBuilder.Entity("BuyRealEstate.Domain.Models.Document", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<byte[]>("DocumentData")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("DocumentDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InsertUser")
                        .HasColumnType("int");

                    b.Property<int?>("PamentID")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectID")
                        .HasColumnType("int");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdateUser")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PamentID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("UserId");

                    b.ToTable("Documents", (string)null);
                });

            modelBuilder.Entity("BuyRealEstate.Domain.Models.Image", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<byte[]>("ImageData")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ImageDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InsertUser")
                        .HasColumnType("int");

                    b.Property<int>("ProjectID")
                        .HasColumnType("int");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdateUser")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ProjectID");

                    b.ToTable("Images", (string)null);
                });

            modelBuilder.Entity("BuyRealEstate.Domain.Models.LegalStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InsertUser")
                        .HasColumnType("int");

                    b.Property<int>("ProjectID")
                        .HasColumnType("int");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdateUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectID");

                    b.ToTable("LegalStatuses", (string)null);
                });

            modelBuilder.Entity("BuyRealEstate.Domain.Models.Payment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("Component")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InsertUser")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastPaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProfessionalId")
                        .HasColumnType("int");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdateUser")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ProfessionalId");

                    b.ToTable("Payments", (string)null);
                });

            modelBuilder.Entity("BuyRealEstate.Domain.Models.PaymentExecutionMethod", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InsertUser")
                        .HasColumnType("int");

                    b.Property<int>("PaymentExecutionMethodID")
                        .HasColumnType("int");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdateUser")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PaymentExecutionMethodID");

                    b.ToTable("PaymentExecutionMethods", (string)null);
                });

            modelBuilder.Entity("BuyRealEstate.Domain.Models.PaymentStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InsertUser")
                        .HasColumnType("int");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdateUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId");

                    b.ToTable("PaymentStatuses", (string)null);
                });

            modelBuilder.Entity("BuyRealEstate.Domain.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("permission")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permissions", (string)null);
                });

            modelBuilder.Entity("BuyRealEstate.Domain.Models.Plot", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InsertUser")
                        .HasColumnType("int");

                    b.Property<double>("MonthlyFundingCost")
                        .HasColumnType("float");

                    b.Property<int>("MonthsForFundingCost")
                        .HasColumnType("int");

                    b.Property<int>("PlotCost")
                        .HasColumnType("int");

                    b.Property<int>("PlotNumber")
                        .HasColumnType("int");

                    b.Property<double>("PlotSize")
                        .HasColumnType("float");

                    b.Property<double>("PlotValue")
                        .HasColumnType("float");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdateUser")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ProjectId");

                    b.ToTable("Plots", (string)null);
                });

            modelBuilder.Entity("BuyRealEstate.Domain.Models.Project", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<double>("GrossProfit")
                        .HasColumnType("float");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InsertUser")
                        .HasColumnType("int");

                    b.Property<string>("LinkToLead2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectManagerID")
                        .HasColumnType("int");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ProjectType")
                        .HasColumnType("bit");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdateUser")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ProjectManagerID");

                    b.ToTable("Projects", (string)null);
                });

            modelBuilder.Entity("BuyRealEstate.Domain.Models.RelationshipCustomersPlots", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InsertUser")
                        .HasColumnType("int");

                    b.Property<int>("PlotID")
                        .HasColumnType("int");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdateUser")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PlotID");

                    b.HasIndex("UserID");

                    b.ToTable("CustomerPlots", (string)null);
                });

            modelBuilder.Entity("BuyRealEstate.Domain.Models.RelationshipPaymentsPlots", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InsertUser")
                        .HasColumnType("int");

                    b.Property<int>("PaymentID")
                        .HasColumnType("int");

                    b.Property<int>("PlotID")
                        .HasColumnType("int");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdateUser")
                        .HasColumnType("int");

                    b.Property<int>("paymentStutusId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PaymentID");

                    b.HasIndex("PlotID");

                    b.HasIndex("paymentStutusId");

                    b.ToTable("PlotPayments", (string)null);
                });

            modelBuilder.Entity("BuyRealEstate.Domain.Models.RelationshipPaymentsProjects", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InsertUser")
                        .HasColumnType("int");

                    b.Property<int>("PaymentID")
                        .HasColumnType("int");

                    b.Property<int>("ProjectID")
                        .HasColumnType("int");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdateUser")
                        .HasColumnType("int");

                    b.Property<int>("paymentStutusId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PaymentID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("paymentStutusId");

                    b.ToTable("ProjectPayments", (string)null);
                });

            modelBuilder.Entity("BuyRealEstate.Domain.Models.Users", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InsertUser")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdateUser")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("PermissionId");

                    b.ToTable("Users", (string)null);

                    b.HasDiscriminator().HasValue("Users");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("BuyRealEstate.Domain.Models.Professional", b =>
                {
                    b.HasBaseType("BuyRealEstate.Domain.Models.Users");

                    b.Property<string>("Professtion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebsiteAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Professional");
                });

            modelBuilder.Entity("BuyRealEstate.Domain.Models.DevelopmentStatus", b =>
                {
                    b.HasOne("BuyRealEstate.Domain.Models.Project", "Project")
                        .WithMany("DeveloperStatus")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("BuyRealEstate.Domain.Models.Document", b =>
                {
                    b.HasOne("BuyRealEstate.Domain.Models.Payment", "Payment")
                        .WithMany("PaymentConfirmation")
                        .HasForeignKey("PamentID");

                    b.HasOne("BuyRealEstate.Domain.Models.Project", "Project")
                        .WithMany("Documents")
                        .HasForeignKey("ProjectID");

                    b.HasOne("BuyRealEstate.Domain.Models.Users", "User")
                        .WithMany("Documents")
                        .HasForeignKey("UserId");

                    b.Navigation("Payment");

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BuyRealEstate.Domain.Models.Image", b =>
                {
                    b.HasOne("BuyRealEstate.Domain.Models.Project", "Project")
                        .WithMany("Images")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("BuyRealEstate.Domain.Models.LegalStatus", b =>
                {
                    b.HasOne("BuyRealEstate.Domain.Models.Project", "Project")
                        .WithMany("LegalStatus")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("BuyRealEstate.Domain.Models.Payment", b =>
                {
                    b.HasOne("BuyRealEstate.Domain.Models.Professional", "Professional")
                        .WithMany("Payments")
                        .HasForeignKey("ProfessionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Professional");
                });

            modelBuilder.Entity("BuyRealEstate.Domain.Models.PaymentExecutionMethod", b =>
                {
                    b.HasOne("BuyRealEstate.Domain.Models.Payment", "Payment")
                        .WithMany("PaymentExecutionMethod")
                        .HasForeignKey("PaymentExecutionMethodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("BuyRealEstate.Domain.Models.PaymentStatus", b =>
                {
                    b.HasOne("BuyRealEstate.Domain.Models.Payment", "Payment")
                        .WithMany("PaymentStatus")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("BuyRealEstate.Domain.Models.Plot", b =>
                {
                    b.HasOne("BuyRealEstate.Domain.Models.Project", "Project")
                        .WithMany("Plots")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("BuyRealEstate.Domain.Models.Project", b =>
                {
                    b.HasOne("BuyRealEstate.Domain.Models.Users", "ProjectManager")
                        .WithMany()
                        .HasForeignKey("ProjectManagerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectManager");
                });

            modelBuilder.Entity("BuyRealEstate.Domain.Models.RelationshipCustomersPlots", b =>
                {
                    b.HasOne("BuyRealEstate.Domain.Models.Plot", "Plot")
                        .WithMany("CustomerPlots")
                        .HasForeignKey("PlotID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BuyRealEstate.Domain.Models.Users", "User")
                        .WithMany("CustomerPlots")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Plot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BuyRealEstate.Domain.Models.RelationshipPaymentsPlots", b =>
                {
                    b.HasOne("BuyRealEstate.Domain.Models.Payment", "payment")
                        .WithMany("PaymentPlots")
                        .HasForeignKey("PaymentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BuyRealEstate.Domain.Models.Plot", "plot")
                        .WithMany("PaymentPlots")
                        .HasForeignKey("PlotID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BuyRealEstate.Domain.Models.PaymentStatus", "paymentStutus")
                        .WithMany()
                        .HasForeignKey("paymentStutusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("payment");

                    b.Navigation("paymentStutus");

                    b.Navigation("plot");
                });

            modelBuilder.Entity("BuyRealEstate.Domain.Models.RelationshipPaymentsProjects", b =>
                {
                    b.HasOne("BuyRealEstate.Domain.Models.Payment", "payment")
                        .WithMany("PaymentProject")
                        .HasForeignKey("PaymentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BuyRealEstate.Domain.Models.Project", "project")
                        .WithMany("PaymentProject")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BuyRealEstate.Domain.Models.PaymentStatus", "paymentStutus")
                        .WithMany()
                        .HasForeignKey("paymentStutusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("payment");

                    b.Navigation("paymentStutus");

                    b.Navigation("project");
                });

            modelBuilder.Entity("BuyRealEstate.Domain.Models.Users", b =>
                {
                    b.HasOne("BuyRealEstate.Domain.Models.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("BuyRealEstate.Domain.Models.Payment", b =>
                {
                    b.Navigation("PaymentConfirmation");

                    b.Navigation("PaymentExecutionMethod");

                    b.Navigation("PaymentPlots");

                    b.Navigation("PaymentProject");

                    b.Navigation("PaymentStatus");
                });

            modelBuilder.Entity("BuyRealEstate.Domain.Models.Plot", b =>
                {
                    b.Navigation("CustomerPlots");

                    b.Navigation("PaymentPlots");
                });

            modelBuilder.Entity("BuyRealEstate.Domain.Models.Project", b =>
                {
                    b.Navigation("DeveloperStatus");

                    b.Navigation("Documents");

                    b.Navigation("Images");

                    b.Navigation("LegalStatus");

                    b.Navigation("PaymentProject");

                    b.Navigation("Plots");
                });

            modelBuilder.Entity("BuyRealEstate.Domain.Models.Users", b =>
                {
                    b.Navigation("CustomerPlots");

                    b.Navigation("Documents");
                });

            modelBuilder.Entity("BuyRealEstate.Domain.Models.Professional", b =>
                {
                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
